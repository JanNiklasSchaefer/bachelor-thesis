"""
This code was created as part of Jan Niklas Schäfer's bachelor thesis
Author: Jan Niklas Schäfer
"""
import numpy as np
import matplotlib.pyplot as plt

speed_increase_array = [0.54, 0.53400004, 0.47526002, 0.42298138, 0.37645328, 0.33504355, 0.2981887, 0.265388,
                        0.23619533,
                        0.2102139, 0.18709016, 0.16651058, 0.14819431, 0.13189292, 0.117384434, 0.10447216, 0.092980385,
                        0.08275223, 0.07364988, 0.06554842, 0.05833769, 0.05192089, 0.046209335, 0.04112625,
                        0.036602497,
                        0.032576084, 0.028992653, 0.025803566, 0.022965431, 0.020439148, 0.01819086, 0.016189575,
                        0.014409065,
                        0.0128240585, 0.011413097, 0.010158062, 0.009040356, 0.00804615, 0.0071611404, 0.0063734055,
                        0.005671978,
                        0.005048275, 0.0044927597, 0.0039987564, 0.0035586357, 0.0031676292, 0.0028190613, 0.0025086403,
                        0.0022330284, 0.0019874573, 0.001768589, 0.0015740395, 0.0014009476, 0.0012469292, 0.0011096001,
                        9.875298E-4, 8.788109E-4, 7.824898E-4, 6.9618225E-4, 6.198883E-4, 5.517006E-4, 4.9066544E-4,
                        4.3678284E-4, 3.8862228E-4, 3.4618378E-4, 3.080368E-4, 2.7418137E-4, 2.4414062E-4, 2.169609E-4,
                        1.9311905E-4, 1.7213821E-4, 1.5306473E-4, 1.3637543E-4, 1.2111664E-4, 1.077652E-4, 9.584427E-5,
                        8.535385E-5, 7.6293945E-5, 6.771088E-5, 6.0081482E-5, 5.340576E-5, 4.7683716E-5, 4.2438507E-5,
                        3.7670135E-5, 3.385544E-5, 3.0040741E-5, 2.670288E-5, 2.3841858E-5, 2.0980835E-5, 1.859665E-5,
                        1.66893E-5, 1.4781952E-5, 1.335144E-5, 1.1920929E-5, 1.04904175E-5, 9.536743E-6, 8.106232E-6,
                        7.6293945E-6, 6.67572E-6, 5.722046E-6, 5.2452087E-6, 4.7683716E-6, 4.2915344E-6, 3.8146973E-6,
                        3.33786E-6, 2.861023E-6, 2.3841858E-6, 2.3841858E-6, 1.9073486E-6, 1.9073486E-6, 1.4305115E-6,
                        1.4305115E-6, 1.4305115E-6, 9.536743E-7, 9.536743E-7, 9.536743E-7, 9.536743E-7, 4.7683716E-7,
                        4.7683716E-7, 4.7683716E-7, 4.7683716E-7, 4.7683716E-7, 4.7683716E-7, 4.7683716E-7,
                        4.7683716E-7,
                        4.7683716E-7, 4.7683716E-7]

current_speed = [0, 0.53400004, 1.00926, 1.4322414, 1.8086947, 2.1437383, 2.441927, 2.707315, 2.9435103, 3.1537242,
                 3.3408144, 3.507325, 3.6555192, 3.7874122, 3.9047966, 4.0092688, 4.102249, 4.1850014, 4.2586513,
                 4.3241997, 4.3825374, 4.4344583, 4.4806676, 4.521794, 4.5583963, 4.5909724, 4.619965, 4.6457686,
                 4.668734, 4.689173, 4.707364, 4.7235537, 4.7379627, 4.750787, 4.7622, 4.772358, 4.7813983,
                 4.7894444, 4.7966056, 4.802979, 4.808651, 4.8136992, 4.818192, 4.8221908, 4.8257494, 4.828917,
                 4.831736, 4.8342447, 4.8364778, 4.838465, 4.840234, 4.841808, 4.843209, 4.8444557, 4.8455653,
                 4.846553, 4.8474317, 4.848214, 4.8489103, 4.84953, 4.850082, 4.8505726, 4.8510094, 4.851398,
                 4.851744, 4.852052, 4.8523264, 4.8525705, 4.8527875, 4.8529806, 4.8531528, 4.853306, 4.853442,
                 4.8535633, 4.853671, 4.853767, 4.8538523, 4.8539286, 4.8539963, 4.8540564, 4.85411, 4.8541574,
                 4.8542, 4.8542376, 4.8542714, 4.8543015, 4.854328, 4.854352, 4.854373, 4.8543916, 4.8544083,
                 4.854423, 4.8544364, 4.8544483, 4.854459, 4.8544683, 4.8544765, 4.854484, 4.8544908, 4.8544965,
                 4.8545017, 4.8545065, 4.854511, 4.8545146, 4.854518, 4.854521, 4.854523, 4.8545256, 4.8545275,
                 4.8545294, 4.854531, 4.8545322, 4.8545337, 4.8545346, 4.8545356, 4.8545365, 4.8545375, 4.854538,
                 4.8545384, 4.854539, 4.8545394, 4.85454, 4.8545403, 4.854541, 4.8545413, 4.854542, 4.8545423]

np_y_array = np.asarray(speed_increase_array)

size = np_y_array.size

np_x_array = np.asarray(current_speed)
degree = 1


def linear_func(x):
    if x < 0.54:
        return 0.54
    return - 0.124 * x + 0.6


list = []
for entry in np_x_array:
    list.append(linear_func(entry))
fitted_linear_array = np.asarray(list)
# Plot the original data and the fitted exponential function
plt.scatter(np_x_array, np_y_array, label='Recorded Data', color='red')
plt.plot(np_x_array, fitted_linear_array, label='estimateNormalSpeedGain(speed)', color='green')
plt.xlabel('Speed')
plt.ylabel('Speed Increase in Next Frame')
plt.legend()
plt.title('Speed Increase Function while Walking')
plt.grid(True)
# plt.savefig('estimateNormalSpeedGain.pdf')
plt.show()
